2/2

Aim: Documenting your data

Do Now: What are some of the drawbacks to using an SQL database?

NoSQL

Graph database
Map database
Document database

Document-Oriented Database

	Records in Document Oriented Databases are stored as documents.

	Each document contains all the data that is associated with the given record,
	given in key-value pairs (fields).

	Documents in the same collection do not need to have the same fields.

	Documents that are meant to be stored together are put into collections.

	You do not need to specify the type of data put into each field.

	Fields can contain many different kinds of data, including lists and other
	documents.

	Each document has its own primary key generated by mongo.

pymongo import MongoClient

database = client["foo"]
database = client.foo
====================================================
2/3
Aim: Mongo likes py

Working with pymongo

	from pymongo import MongoClient

	Connecting to a mongodb server and database

		   server = MongoClient<IP>

	To access databases, collections and documents, you can use either [] or .

	   db = server['mydb']
	   db = server.mydb

	   c = db['students'] #db.students

	Databases and collections are not created until a document has been added to them!

	To add a document

	   1. Create a dictionary
	   2. Insert it to the collection

	      doc = {'name': 'bob', 'age': 65}

	      c.insert_one(doc)
======================================================
Retrieving data from mongodb

	   .find()

		Collection method that returns a cursor object
		that can be used to iterate through all the documents in a collection.

	   .find_one()

		Collection method that returns a single document to a dictionary

	   Querying a mongodb

	   	.find() and .find_one() can take an argument to narrow the resulting comment.

		Queries in pymongo are formatted as documents
 
		foo.find( { 'name': 'test'} )
		
		foo.find( {

		'$and' : [
		       {'name': 'test'},
		       {'age': 25}
		]})

		col.find( { 'age' : {'$gt': 30} } )

		$gt, $lt, $gte, $lte, $ne
=========================================================
Modifying data

	  .delete_one(<QUERY>)

		Deletes the first document that matches the query

	  .delete_many(<QUERY>)

		Deletes all the documents that match the query

	  .update(<QUERY>, <OPERATION>)

	  	Updates a document that matches the query

		Operation is a document that matches an update
		operation:

			'$set':
				change the value of the field

			'$unset':
				Remove a field

			'$inc':
				Increment the value of a field
==================================================================
< canvas >< /canvas >

c.getContext('2d'); where c is a canvas element
c.clearRect()

Path functions

     The path is not drawn until stroke() is called

     A path is considered done when a new beginPath() is called

     beginPath()

     moveTo(x, y)
     	       - Moves the path to a position (x, y)
	       - Does not result in a line or filled in section

     lineTo(x, y)
     	       - Moves the path to a position (x, y)
	       - Will result in a line or a filled in secion

     arcTo(250, 150, 50, start angle, end angle)

     closePath()
	Creates a line from the current position to the starting position

     stroke()
        Renders all lines in the path
	
     fill()
        A path does not have to be closed to be filled

requestAnimationFrame()
run a specified function before next frame()
~60 frames per second
lets the browser pause animation when page is not in the foreground
rid = window.requestAnimationFrame(<function>)
window.cancelAnimationFrame(rid);

setInterval()
runs code every specified number of seconds

closure functional programming
===============================================================
Aim: What's your vector victor?

svg - scalable vector graphics

XML - extensible markup language

    It is not a formatting language (like HTML)
    A framework for creating markup based grammars

    Uses some of the syntatic standards of HTML, like
    tags and attributes, with a focus on storing and representing data
    instead of rendering and displaying it.

    An XML namespace is defined by the tags and attributes associated
    with a specific XML language.

SVG
    Scalable vector graphics

    SVG is a specific XML based vector graphics format.

    Vector graphics are images that are not represented as a 2d grid of
    pixels (raster) but instead as a list of drawing commands (like line,
    circle, rectangle, curve, ...).

    The <svg> element is designed to store SVG code (that is, SVG XML
    elements)

    xml namespace
    <svg xmlns="http://www.w3.org/2000/svg">
    	 SVG code here
    </svg>

createElementNS
================================================================
SVG requires closing tags

document.createElementNS( <NAMESPACE>, <ELEMENT> );
Creates an element from a specified XML namespace

svg example:
    var cl = document.createElementNS ("http://www.w3.org/2000/svg", "circle");
    	Once created, you can modify it with setAttribute calls
	     cl.setAttribute("cx", "200");

js event propagation
   events propagate downward from the top most node to target elements.
   this is called event capturing

   then goes back up event tree, known as even bubbling

   by default, event listeners do not trigger until the even bubbling phase

   triggering events at the capture phase can be done by adding <True> as a third argument
   to addEventListener

   x.addEventListener("click", foo, true)

   You can cancel eventPropagation with e.stopPropagation();
=================================================================
Event Propagation:

      1. An element intercepts an event

      2. Browser collects DOM node path of the event from the starting element to the root.

      3. Capture: The event propagates down the path from step 2

      4. Even bubbling: The event propagates down the path from step 2

      Fires once per propagation scheme
=================================================================
Aim: r3d3?

d3.js
	javascript framework designed for working with data

	The basics

	    Include https://d3js.org/d3.v3.min.js in a script tag to use d3, or download the source

	Selectors
		Like jquery, you can select dom elements using d3 functions

		d3.select( <IDENTIFIER> );
			   Returns the first element that matches the first identifier

		d3.selectAll( <IDENTIFIER> );
			      Returns an array of all the elements that match the given identifier

		d3.selectAll("p").style("font-size", function() {
						     	return Math.floor(Math.random() * 20) + "px"
						     });

	Binding data

		You can bind data to elements in d3 using the .data method

		    var info = [23, 45, 10, 17]

		    d3.selectAll("p").data(info);

		    function(d) {
		    		return d + "px";
		    };

		    d refers to data
=======================================================================
Many of the methods that can use anonymous functions allow parameters

<!DOCTYPE html>

<head>
	<script src="https://d3js.org/d3.v3.min.js"></script>
	<title>D3 Intro</title>
	<style>
	.chart div {
	       font : 10px sans-serif;
	       background color: steelblue;
	       text-align:right;
	       padding:3px;
	       margin: 1px;
	       color:white;
	}
	</style>
</head>

<body>
	<h2>Static Chart</h2>
	<div class="chart">
	     <div style="width: 40px;">4</div>
	     <div style="width: 80px;">8</div>
	     <div style="width: 160px;">16</div>	
	     <div style="width: 230px;">23</div>		
	     <div style="width: 420px;">42</div>
	</div>

<hr>

<h2>Dynamic Chart</h2>
<div class="chart" id="dynamic">
</div>
<script>
	var dyn = d3.select("#dynamic");
	var info = [4, 8, 15, 16, 23, 42];
</script>

dyn.selectAll("div")
.data(info)
.transition()
.duration(2000)
.style("width", function(d) {
	return d * 10 + "px"; });